// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Compiler Project/ProjectFiles/src/Scanner.flex

// user code
// mesle package ha
// balaye code e scanner asli ezafe mishe.


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\3"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\2\7\1\12"+
    "\1\13\1\7\1\13\1\14\1\15\1\16\11\17\1\0"+
    "\1\7\1\5\1\20\1\5\2\0\1\21\3\22\1\23"+
    "\1\22\21\24\1\25\2\24\1\7\1\26\2\7\1\27"+
    "\1\0\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\24\1\41\1\42\1\24\1\43\1\44"+
    "\1\45\1\24\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\25\1\54\1\24\1\7\1\55\1\7\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\4\4\2\6"+
    "\17\7\1\10\1\11\1\1\1\0\1\12\1\13\3\0"+
    "\7\7\1\14\14\7\1\15\1\0\2\12\1\0\1\16"+
    "\7\7\1\14\11\7\1\0\1\16\2\7\1\14\13\7"+
    "\1\14\10\7\1\14\5\7\1\14\2\7\1\14\26\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\134\0\134\0\212\0\270\0\134"+
    "\0\134\0\346\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\134\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u05ee\0\u0730\0\u075e"+
    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\134\0\u09b4\0\u09e2\0\u0592"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0a10"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u04ac\0\u09e2\0\u0cf0\0\u0d1e\0\u0cf0\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u105a\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e"+
    "\0\u116e\0\u119c\0\u11ca\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2"+
    "\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562"+
    "\0\u1590\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\3\1\7\1\13\1\11\1\14\1\15\1\16\1\7"+
    "\1\17\4\20\2\3\1\20\1\21\1\22\1\20\1\23"+
    "\1\24\2\20\1\25\1\20\1\26\1\27\1\20\1\30"+
    "\1\31\1\32\1\33\1\20\1\34\1\35\1\20\1\12"+
    "\2\36\1\3\1\36\1\3\1\36\1\37\17\36\1\40"+
    "\27\36\60\0\1\5\73\0\1\11\45\0\1\11\2\0"+
    "\1\11\41\0\1\11\10\0\1\11\2\0\1\11\4\0"+
    "\1\11\34\0\1\11\12\0\1\41\2\0\1\42\2\0"+
    "\1\11\51\0\1\43\1\0\2\16\3\0\1\44\1\0"+
    "\1\45\6\0\1\44\20\0\1\46\14\0\1\43\1\0"+
    "\2\16\3\0\1\44\10\0\1\44\20\0\1\44\16\0"+
    "\2\47\1\0\5\47\1\0\17\47\1\50\6\47\17\0"+
    "\2\47\1\0\5\47\1\0\26\47\17\0\2\47\1\0"+
    "\5\47\1\0\15\47\1\51\1\47\1\52\6\47\17\0"+
    "\2\47\1\0\5\47\1\0\13\47\1\53\1\47\1\54"+
    "\10\47\17\0\2\47\1\0\5\47\1\0\13\47\1\55"+
    "\12\47\17\0\2\47\1\0\5\47\1\0\11\47\1\56"+
    "\3\47\1\57\10\47\17\0\2\47\1\0\5\47\1\0"+
    "\6\47\1\56\5\47\1\60\11\47\17\0\2\47\1\0"+
    "\5\47\1\0\5\47\1\61\7\47\1\62\10\47\17\0"+
    "\2\47\1\0\5\47\1\0\5\47\1\63\20\47\17\0"+
    "\2\47\1\0\5\47\1\0\15\47\1\51\1\47\1\64"+
    "\6\47\17\0\2\47\1\0\5\47\1\0\5\47\1\65"+
    "\7\47\1\66\10\47\17\0\2\47\1\0\5\47\1\0"+
    "\21\47\1\67\4\47\17\0\2\47\1\0\5\47\1\0"+
    "\10\47\1\70\15\47\17\0\2\47\1\0\5\47\1\0"+
    "\15\47\1\71\10\47\17\0\2\47\1\0\5\47\1\0"+
    "\10\47\1\72\15\47\1\0\2\36\1\0\1\36\1\0"+
    "\1\36\1\0\17\36\1\0\27\36\6\0\1\73\2\0"+
    "\1\73\14\0\1\73\14\0\1\73\2\0\1\73\1\0"+
    "\1\73\5\0\12\41\1\74\43\41\2\42\1\75\1\42"+
    "\1\76\51\42\16\0\2\43\3\0\1\44\10\0\1\44"+
    "\20\0\1\44\13\0\1\77\41\0\1\77\16\0\2\100"+
    "\1\0\3\100\4\0\6\100\33\0\1\77\2\0\2\100"+
    "\1\0\3\100\4\0\6\100\17\0\1\77\16\0\2\101"+
    "\1\0\5\101\1\0\26\101\17\0\2\101\1\0\5\101"+
    "\1\0\17\101\1\102\6\101\17\0\2\101\1\0\5\101"+
    "\1\0\15\101\1\103\10\101\17\0\2\101\1\0\5\101"+
    "\1\0\5\101\1\104\20\101\17\0\2\101\1\0\5\101"+
    "\1\0\1\101\1\105\24\101\17\0\2\101\1\0\5\101"+
    "\1\0\14\101\1\106\11\101\17\0\2\101\1\0\5\101"+
    "\1\0\20\101\1\107\5\101\17\0\2\101\1\0\5\101"+
    "\1\0\17\101\1\110\6\101\17\0\2\101\1\0\5\101"+
    "\1\0\1\111\20\101\1\110\4\101\17\0\2\101\1\0"+
    "\5\101\1\0\14\101\1\110\4\101\1\110\4\101\17\0"+
    "\2\101\1\0\5\101\1\0\15\101\1\112\10\101\17\0"+
    "\2\101\1\0\5\101\1\0\24\101\1\110\1\101\17\0"+
    "\2\101\1\0\5\101\1\0\11\101\1\113\14\101\17\0"+
    "\2\101\1\0\5\101\1\0\1\101\1\103\17\101\1\114"+
    "\4\101\17\0\2\101\1\0\5\101\1\0\6\101\1\110"+
    "\17\101\17\0\2\101\1\0\5\101\1\0\1\101\1\115"+
    "\15\101\1\116\6\101\17\0\2\101\1\0\5\101\1\0"+
    "\5\101\1\117\20\101\17\0\2\101\1\0\5\101\1\0"+
    "\11\101\1\120\14\101\17\0\2\101\1\0\5\101\1\0"+
    "\11\101\1\121\14\101\27\0\1\122\27\0\12\41\1\74"+
    "\2\41\1\75\40\41\2\0\1\75\71\0\2\123\54\0"+
    "\2\124\1\0\5\124\1\0\26\124\17\0\2\124\1\0"+
    "\5\124\1\0\1\124\1\125\24\124\17\0\2\124\1\0"+
    "\5\124\1\0\13\124\1\126\12\124\17\0\2\124\1\0"+
    "\5\124\1\0\1\124\1\127\24\124\17\0\2\124\1\0"+
    "\5\124\1\0\20\124\1\130\5\124\17\0\2\124\1\0"+
    "\5\124\1\0\21\124\1\131\4\124\17\0\2\124\1\0"+
    "\5\124\1\0\5\124\1\126\20\124\17\0\2\124\1\0"+
    "\5\124\1\0\11\124\1\132\6\124\1\133\5\124\17\0"+
    "\2\124\1\0\5\124\1\0\16\124\1\126\7\124\17\0"+
    "\2\124\1\0\5\124\1\0\14\124\1\134\11\124\17\0"+
    "\2\124\1\0\5\124\1\0\22\124\1\135\3\124\17\0"+
    "\2\124\1\0\5\124\1\0\21\124\1\136\4\124\17\0"+
    "\2\124\1\0\5\124\1\0\11\124\1\137\14\124\17\0"+
    "\2\124\1\0\5\124\1\0\14\124\1\126\11\124\17\0"+
    "\2\124\1\0\5\124\1\0\4\124\1\126\21\124\17\0"+
    "\2\124\1\0\5\124\1\0\13\124\1\140\12\124\17\0"+
    "\2\141\1\0\5\141\1\0\26\141\17\0\2\141\1\0"+
    "\5\141\1\0\25\141\1\142\17\0\2\141\1\0\5\141"+
    "\1\0\12\141\1\142\13\141\17\0\2\141\1\0\5\141"+
    "\1\0\20\141\1\142\5\141\17\0\2\141\1\0\5\141"+
    "\1\0\11\141\1\143\14\141\17\0\2\141\1\0\5\141"+
    "\1\0\14\141\1\144\11\141\17\0\2\141\1\0\5\141"+
    "\1\0\21\141\1\145\4\141\17\0\2\141\1\0\5\141"+
    "\1\0\21\141\1\142\4\141\17\0\2\141\1\0\5\141"+
    "\1\0\17\141\1\146\6\141\17\0\2\141\1\0\5\141"+
    "\1\0\11\141\1\147\14\141\17\0\2\141\1\0\5\141"+
    "\1\0\14\141\1\150\11\141\17\0\2\141\1\0\5\141"+
    "\1\0\5\141\1\142\20\141\17\0\2\151\1\0\5\151"+
    "\1\0\26\151\17\0\2\151\1\0\5\151\1\0\14\151"+
    "\1\152\11\151\17\0\2\151\1\0\5\151\1\0\21\151"+
    "\1\153\4\151\17\0\2\151\1\0\5\151\1\0\17\151"+
    "\1\154\6\151\17\0\2\151\1\0\5\151\1\0\14\151"+
    "\1\153\11\151\17\0\2\151\1\0\5\151\1\0\3\151"+
    "\1\153\22\151\17\0\2\151\1\0\5\151\1\0\7\151"+
    "\1\153\16\151\17\0\2\155\1\0\5\155\1\0\26\155"+
    "\17\0\2\155\1\0\5\155\1\0\22\155\1\156\3\155"+
    "\17\0\2\155\1\0\5\155\1\0\11\155\1\157\14\155"+
    "\17\0\2\160\1\0\5\160\1\0\26\160\17\0\2\160"+
    "\1\0\5\160\1\0\5\160\1\161\20\160\17\0\2\160"+
    "\1\0\5\160\1\0\14\160\1\162\11\160\17\0\2\163"+
    "\1\0\5\163\1\0\26\163\17\0\2\163\1\0\5\163"+
    "\1\0\7\163\1\164\16\163\17\0\2\165\1\0\5\165"+
    "\1\0\26\165\17\0\2\166\1\0\5\166\1\0\26\166"+
    "\17\0\2\167\1\0\5\167\1\0\26\167\17\0\2\170"+
    "\1\0\5\170\1\0\26\170\17\0\2\171\1\0\5\171"+
    "\1\0\26\171\17\0\2\172\1\0\5\172\1\0\26\172"+
    "\17\0\2\173\1\0\5\173\1\0\26\173\17\0\2\174"+
    "\1\0\5\174\1\0\26\174\17\0\2\175\1\0\5\175"+
    "\1\0\26\175\17\0\2\176\1\0\5\176\1\0\26\176"+
    "\17\0\2\177\1\0\5\177\1\0\26\177\17\0\2\200"+
    "\1\0\5\200\1\0\26\200\17\0\2\201\1\0\5\201"+
    "\1\0\26\201\17\0\2\202\1\0\5\202\1\0\26\202"+
    "\17\0\2\203\1\0\5\203\1\0\26\203\17\0\2\204"+
    "\1\0\5\204\1\0\26\204\17\0\2\205\1\0\5\205"+
    "\1\0\26\205\17\0\2\206\1\0\5\206\1\0\26\206"+
    "\17\0\2\207\1\0\5\207\1\0\26\207\17\0\2\210"+
    "\1\0\5\210\1\0\26\210\17\0\2\211\1\0\5\211"+
    "\1\0\26\211\17\0\2\212\1\0\5\212\1\0\26\212"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5566];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\2\1\2\11\25\1\1\11\1\1\1\0"+
    "\2\1\3\0\25\1\1\0\1\11\1\1\1\0\22\1"+
    "\1\0\67\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
     public class Token {
     String type;
     Object value;
     int lineNumber;
     public Token(String type , Object value , int lineNumber){
         this.value=value;
         this.type=type;
         this.lineNumber=lineNumber;
     }
 }
    //dakhele class e scanner ezafe misheh.
    // tarif e variable va function va class dar inja tarif mishavad.
    public int ICV;
    public double RCV;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //    return "Error at line: "+yyline + "index: "+ yycolumn + "character = "+ yytext()  ;
     System.out.println("Error at line: "+yyline + "index: "+ yycolumn + "character = "+ yytext());
     return new Token("Undefined", yytext() , yyline) ;
            }
            // fall through
          case 15: break;
          case 2:
            { return new Token("Tab",yytext(), yyline);
            }
            // fall through
          case 16: break;
          case 3:
            { return new Token("WhiteSpace",yytext(), yyline);
            }
            // fall through
          case 17: break;
          case 4:
            { return new Token("Operators",yytext(), yyline);
            }
            // fall through
          case 18: break;
          case 5:
            { yybegin(STRING);
        return new Token("String",yytext(), yyline);
            }
            // fall through
          case 19: break;
          case 6:
            { ICV = Integer.parseInt(yytext());
        System.out.print("Number: "+ ICV + " ");
        return new Token("Integer",ICV, yyline);
            }
            // fall through
          case 20: break;
          case 7:
            { return new Token("Identifiers",yytext() , yyline);
            }
            // fall through
          case 21: break;
          case 8:
            { return new Token("String",yytext(), yyline);
            }
            // fall through
          case 22: break;
          case 9:
            { yybegin(YYINITIAL);
          return new Token("String",yytext(), yyline);
            }
            // fall through
          case 23: break;
          case 10:
            { return new Token("Comment",yytext() , yyline);
            }
            // fall through
          case 24: break;
          case 11:
            { return new Token("Real",yytext(), yyline);
            }
            // fall through
          case 25: break;
          case 12:
            { // System.out.println (yyline);
            return new Token("Reserved",yytext() , yyline);
            }
            // fall through
          case 26: break;
          case 13:
            { return new Token("Special Characters",yytext(), yyline);
            }
            // fall through
          case 27: break;
          case 14:
            { return new Token("Integer",yytext(), yyline);
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
